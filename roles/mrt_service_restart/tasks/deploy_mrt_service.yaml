---

- name: "Check for Capisrano deploy script - {{ az }}"
  ansible.builtin.stat:
    path: "{{ cap_deploy_script }}"
  register: script_status

- name: "Query configured service release"
  become: true
  become_method: sudo
  become_user: "{{ service_user[service_name] }}"
  ansible.builtin.command: "grep 'MERRITT_SERVICE_RELEASE=' {{ cap_deploy_script }}"
  register: configured

- name: "Query deployed build tag"
  ansible.builtin.uri:
    url: "{{ build_content_url[service_name] }}"
    return_content: true
  register: deployed

- name: "Report configured vs. deployed"
  debug:
    msg: "Configured: {{ configured.stdout_lines[0].split('=')[-1] }}\nDeployed:   {{ deployed.content.split()[-1] }}"
  when: not configured.failed and deployed.content is defined

- name: "Check if configured build tag is already deployed"
  debug:
    msg: "Configured build tag is already Deployed. Skipping deployment."
  when: not configured.failed and deployed.content is defined and configured_rev == deployed_rev
  vars:
    configured_rev: "{{ configured.stdout_lines[0].split('=')[-1] }}"
    deployed_rev: "{{ deployed.content.split()[-1] }}"
  # register: already_deployed



# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/assert_module.html
# how do I register a boolean var when comparing statements?
- name: register already_deployed var
  vars:
    configured_rev: "{{ configured.stdout_lines[0].split('=')[-1] }}"
    deployed_rev: "{{ deployed.content.split()[-1] }}"
  assert:
    that: 
      - configured_rev == deployed_rev
  register: already_deployed    
  ignore_errors: True





- when: exec|bool and script_status.stat.executable is defined and script_status.stat.executable and not already_deployed
  block:

  - name: "run cap deploy - {{ az }}"
    become: true
    become_method: sudo
    become_user: "{{ service_user[service_name] }}"
    ansible.builtin.command: "{{ cap_deploy_script }}"
    register: result

  - name: "Report cap deploy success - {{ az }}"
    debug:
      msg: "{{ result.stdout_lines }}"
    when: not result.failed
  
  - name: "Report cap deploy failure - {{ az }}"
    debug:
      msg: "{{ result.stderr_lines }}"
    when: result.failed
    failed_when: true
