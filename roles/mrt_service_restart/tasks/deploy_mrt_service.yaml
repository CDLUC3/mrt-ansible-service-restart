---

- name: "Check for Capisrano deploy script - {{ az }}"
  ansible.builtin.stat:
    path: "{{ cap_deploy_script }}"
  register: script_status
  ignore_errors: true

- name: "Query configured service release"
  ansible.builtin.command: "grep 'MERRITT_SERVICE_RELEASE=' {{ cap_deploy_script }}"
  register: configured
  ignore_errors: true

- name: "Query deployed build tag"
  ansible.builtin.uri:
    url: "{{ build_content_url[service_name] }}"
    return_content: true
  register: deployed
  ignore_errors: true

- name: "set facts 'configured_rev' and 'deployed_rev'"
  ansible.builtin.set_fact:
    configured_rev: "{{ configured.stdout_lines[0].split('=')[-1] }}"
    deployed_rev: "{{ deployed.content.split()[-1] }}"
  ignore_errors: true

- name: "Test if configured service release is already deployed"
  ansible.builtin.set_fact:
    already_deployed: "{{ configured_rev == deployed_rev }}"
  ignore_errors: true

- name: "Report configured vs. deployed"
  debug:
    msg: |
      "configured_rev: {{ configured_rev }}"
      "deployed_rev: {{ deployed_rev }}"
      "already_deployed: {{ already_deployed }}"
  ignore_errors: true

- when: exec|bool and script_status.stat.executable is defined and script_status.stat.executable and not already_deployed
  block:

  - name: "run cap deploy - {{ az }}"
    become: true
    become_method: sudo
    become_user: "{{ service_user[service_name] }}"
    ansible.builtin.command: "{{ cap_deploy_script }}"
    register: cap_deploy
    ignore_errors: true

  - name: "Report cap deploy success - {{ az }}"
    debug:
      msg: "{{ cap_deploy.stdout_lines }}"
    when: not cap_deploy.failed
